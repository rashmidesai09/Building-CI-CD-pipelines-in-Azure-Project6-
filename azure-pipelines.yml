# Starter pipeline    
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- master

# Using current pool name
pool: myagentpool

variables:
  # TODO: Replace the service connection name
  azureServiceConnectionId: 'flaskml'
  
  # TODO: Replace 'mywebapp193576' with the existing Web App name
  webAppName: 'mywebapp10021990'

  # Environment name
  environmentName: 'flask-ml-service'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool: $(poolName)
    steps:    
    - script: |
        python3.7 -m pip install --upgrade pip
        python3.7 -m pip install setup
        python3.7 -m pip install wheel
        python3.7 -m pip install -r requirements.txt
      workingDirectory: $(projectRoot)
    - script: |
        export PATH=$HOME/.local/bin:$PATH
        export PYTHONPATH=$HOME/.local/lib/python3.7/site-packages
        make all
      workingDirectory: $(projectRoot)
      displayName: 'Run lint and tests'
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool: $(poolName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : flask-ml-service'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip

          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              Action: 'Restart Azure App Service'
              WebAppName: $(webAppName)